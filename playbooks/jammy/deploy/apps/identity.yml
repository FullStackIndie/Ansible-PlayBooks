- hosts: a2hosting
  become: true
  vars_prompt:
    - name: user
      prompt: What is your username?
      private: false
    - name: env
      prompt: What is the environment for uploading to AWS S3? [dev, prod] (n for no-op)
      private: false   
  vars:
    image_name: fullstackidentity
    container_name: fullstackidentity
    compose_name: identity
    compose_path: /home/{{ user }}/workspace/compose/{{ compose_name }}
    site_name: FullStackIdentity
    tmp_path:  /tmp/FullStackIdentity
    git_url: https://{{ github_pat_ansible_deploy }}@github.com/FullStackIndieLLC/{{site_name}}.git
    nginx_conf_path: /home/murph/workspace/nginx/conf.d/identity.conf

  tasks:
    - name: Create required Nginx dirs
      ansible.builtin.file:
        path: "{{ compose_path }}"
        state: directory
        owner: "{{ user }}"
        mode: 0755


      
    - name: Deploy website code from GitHub repositories
      git:
        repo: "{{ git_url }}"
        version: main
        dest: "{{ tmp_path }}"
        force: yes

    - name: Upload files to S3
      become: true
      shell: |
        aws s3 sync {{ tmp_path }}/{{ site_name }}/wwwroot s3://{{ env }}-{{ container_name }}/static --follow-symlinks --delete --cache-control 'public,max-age=31536000' \ 
        --exclude ".git/*" --exclude ".vscode/*" --exclude "*.html" --exclude "*.gitignore" --exclude ".github/*" --exclude "*.txt" --exclude "License/*"
      environment:
        - AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        - AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        - AWS_REGION: "{{ aws_region }}"
      when: env != "n"  

    - name: Copy config for Nginx 
      ansible.builtin.copy:
        src: "{{ nginx_conf_path }}"
        dest: /etc/nginx/conf.d
        force: true
        backup: true
        owner: root
        mode: 0755

    - name: Invalidate Dev CloudFront Cache Keys
      shell: |
        aws cloudfront create-invalidation --distribution-id {{ dev_cloudfront_identity_id }} \
        --paths "/{{ site_name }}/static/*"
      environment:
        - AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        - AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        - AWS_REGION: "{{ aws_region }}"
      when: env != "n" and env == "dev"

    - name: Invalidate Prod CloudFront Cache Keys
      shell: |
        aws cloudfront create-invalidation --distribution-id {{ prod_cloudfront_identity_id }} \
        --paths "/{{ site_name }}/static/*"
      environment:
        - AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        - AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        - AWS_REGION: "{{ aws_region }}"
      when: env != "n" and env == "prod"

    - name: Make sure Nginx service unit is running
      ansible.builtin.systemd:
        daemon_reload: true
        state: reloaded
        name: nginx



    - name: Copy Docker Compose
      ansible.builtin.copy:
        src: /home/murph/workspace/compose/{{ compose_name }}/{{ compose_name }}.yml
        dest: "{{ compose_path }}/{{ compose_name }}.yml"
        force: true
        backup: true
        owner: "{{ user }}"
        mode: 0755

    - name: Log into private registry and force re-authorization
      community.docker.docker_login:
        registry_url: https://index.docker.io/v2
        username: "{{ docker_username }}"
        password: "{{ docker_password }}"
        reauthorize: true

    - name: Create a Docker network
      community.docker.docker_network:
        name: telemetry
        state: present

    - name: Pull Latest Blog Image
      shell: |
            docker login --username {{ docker_username }} --password {{ docker_password  }}
            docker pull {{ docker_username }}/{{ image_name }}:latest

    - name: Stop exisiting Blog with Docker Compose and Doppler
      shell: |
            export DOPPLER_TOKEN={{ doppler_token_blog }}
            echo 'OTEL_ENDPOINT={{ otel_endpoint }}' > env.prod
            echo 'DOPPLER_TOKEN={{ doppler_token_blog }}' >> env.prod
            doppler run --mount docker-compose.yml --mount-template {{ compose_name }}.yml --command 'doppler run -- docker compose down'
      args:
        chdir:  "{{ compose_path }}"
      ignore_errors: true

    # - name: Stop exisiting Blog container
    #   shell: |
    #         docker stop {{ container_name }}
    #   ignore_errors: true

    # - name: Remove exisiting Blog container
    #   shell: |
    #         docker rm {{ container_name }}
    #   ignore_errors: true


    - name: Start Blog with Docker Compose and Doppler
      shell: |
            export DOPPLER_TOKEN={{ doppler_token_blog }}
            doppler run --mount docker-compose.yml --mount-template {{ compose_name }}.yml --command 'doppler run -- docker compose up -d'
      args:
        chdir:  "{{ compose_path }}"
        # executable: /bin/bash

    - name: Delete Env file
      ansible.builtin.file:
        path: "{{ compose_path }}/env.prod"
        state: absent
        owner: "{{ user }}"
        mode: 0755

  